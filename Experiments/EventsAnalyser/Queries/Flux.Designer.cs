//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventsAnalyser.Queries {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Flux {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Flux() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EventsAnalyser.Queries.Flux", typeof(Flux).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to from(bucket: &quot;experiment_app&quot;)
        ///  |&gt; range(start: 0)
        ///  |&gt; filter(fn: (r) =&gt; r[&quot;_measurement&quot;] == &quot;spans&quot;)
        ///  |&gt; filter(fn: (r) =&gt; r[&quot;name&quot;] == name or r[&quot;name&quot;] == &quot;AcquireExecutionLockAsync&quot; or r[&quot;name&quot;] == payload)
        ///  |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;duration_nano&quot; or (r[&quot;_field&quot;] == &quot;identity&quot; and r[&quot;_value&quot;] == identity))
        ///  |&gt; pivot(rowKey: [&quot;span_id&quot;], columnKey: [&quot;_field&quot;], valueColumn: &quot;_value&quot;)
        ///  |&gt; group()
        ///  |&gt; pivot(rowKey: [&quot;trace_id&quot;], columnKey: [&quot;name&quot;], valueColumn: &quot;duration_nano&quot;)
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QueryLibAndCodeOperationsDuration {
            get {
                return ResourceManager.GetString("QueryLibAndCodeOperationsDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to from(bucket: &quot;experiment_app&quot;)
        ///  |&gt; range(start: 0)
        ///  |&gt; filter(fn: (r) =&gt; r[&quot;_measurement&quot;] == &quot;spans&quot;)
        ///  |&gt; filter(fn: (r) =&gt; r[&quot;name&quot;] == name )
        ///  |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;duration_nano&quot; or (r[&quot;_field&quot;] == &quot;identity&quot; and r[&quot;_value&quot;] == identity))
        ///  |&gt; pivot(rowKey: [&quot;_time&quot;, &quot;span_id&quot;], columnKey: [&quot;_field&quot;], valueColumn: &quot;_value&quot;)
        ///  |&gt; filter(fn: (r) =&gt; r[&quot;identity&quot;] != &quot;&quot;)
        ///  |&gt; keep(columns: [&quot;_time&quot;, &quot;duration_nano&quot;])
        ///  |&gt; map(fn: (r) =&gt; ({ r with _value: r.duration_nano}))
        ///  |&gt; s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QueryOperationsTimeAndDuration {
            get {
                return ResourceManager.GetString("QueryOperationsTimeAndDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to from(bucket: &quot;experiment_app&quot;)
        ///  |&gt; range(start: 0)
        ///  |&gt; filter(fn: (r) =&gt; r[&quot;_measurement&quot;] == &quot;spans&quot;)
        ///  |&gt; filter(fn: (r) =&gt; r[&quot;name&quot;] == &quot;AcquireExecutionLockAsync&quot;
        ///                    or r[&quot;name&quot;] == &quot;SucceededAsync&quot;
        ///                    or r[&quot;name&quot;] == &quot;IsSucceededAsync&quot;
        ///                    or r[&quot;name&quot;] == &quot;HeartbeatAsync&quot;
        ///                    or r[&quot;name&quot;] == &quot;ReleaseExecutionLockAsync&quot;
        ///                    or r[&quot;name&quot;] == &quot;GetCurrentWorkloadAsync&quot;
        ///                    or r[&quot;name&quot;] == &quot;UpdateWork [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QueryPersistenceOperationsDuration {
            get {
                return ResourceManager.GetString("QueryPersistenceOperationsDuration", resourceCulture);
            }
        }
    }
}
